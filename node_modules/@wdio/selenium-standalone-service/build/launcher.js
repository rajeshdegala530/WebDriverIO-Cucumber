"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _util = require("util");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _seleniumStandalone = _interopRequireDefault(require("selenium-standalone"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const DEFAULT_LOG_FILENAME = 'wdio-selenium-standalone.log';
const log = (0, _logger.default)('@wdio/selenium-standalone-service');
const DEFAULT_CONNECTION = {
  protocol: 'http',
  hostname: 'localhost',
  port: 4444,
  path: '/wd/hub'
};

class SeleniumStandaloneLauncher {
  constructor(options, capabilities, config) {
    _defineProperty(this, "_stopProcess", () => {
      if (this.process) {
        log.info('shutting down all browsers');
        this.process.kill();
      }
    });

    this.capabilities = capabilities;
    this.logPath = options.logPath || config.outputDir;
    this.args = options.args || {};
    this.installArgs = options.installArgs || {};
    this.skipSeleniumInstall = Boolean(options.skipSeleniumInstall);
  }

  async onPrepare(config) {
    this.watchMode = Boolean(config.watch);

    if (!this.skipSeleniumInstall) {
      await (0, _util.promisify)(_seleniumStandalone.default.install)(this.installArgs);
    }

    (Array.isArray(this.capabilities) ? this.capabilities : Object.values(this.capabilities)).forEach(cap => Object.assign(cap, DEFAULT_CONNECTION, _objectSpread({}, cap)));
    this.process = await (0, _util.promisify)(_seleniumStandalone.default.start)(this.args);

    if (typeof this.logPath === 'string') {
      this._redirectLogStream();
    }

    if (this.watchMode) {
      process.on('SIGINT', this._stopProcess);
      process.on('exit', this._stopProcess);
      process.on('uncaughtException', this._stopProcess);
    }
  }

  onComplete() {
    if (!this.watchMode) {
      this._stopProcess();
    }
  }

  _redirectLogStream() {
    const logFile = (0, _utils.getFilePath)(this.logPath, DEFAULT_LOG_FILENAME);

    _fsExtra.default.ensureFileSync(logFile);

    const logStream = _fsExtra.default.createWriteStream(logFile, {
      flags: 'w'
    });

    this.process.stdout.pipe(logStream);
    this.process.stderr.pipe(logStream);
  }

}

exports.default = SeleniumStandaloneLauncher;